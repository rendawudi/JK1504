<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:redis="http://www.springframework.org/schema/redis" xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">  
  
    <!-- 载入redis.properties,这里要特别注意，如果有多个properties文件，必须用逗号分开，不能写成两个 <context:property-placeholder/> -->  
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"  
/>   
  
    <!-- 配置JedisPoolConfig相关参数 -->  
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxTotal" value="${spring.redis.pool.maxTotal}"></property>  
        <property name="maxIdle" value="${spring.redis.pool.maxIdle}"></property>  
        <property name="minIdle" value="${spring.redis.pool.minIdle}"></property>  
        <property name="MaxWaitMillis" value="${spring.redis.pool.MaxWaitMillis}"></property>  
        <property name="testOnBorrow" value="${spring.redis.pool.testOnBorrow}"></property>  
        <property name="testOnReturn" value="${spring.redis.pool.testOnReturn}"></property>  
    </bean>  
  
    <!-- 配置redis服务器信息 -->  
    <bean id="connectionFactory"  
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="poolConfig" ref="poolConfig"></property>  
        <property name="hostName" value="${spring.redis.host}"></property>  
        <property name="port" value="${spring.redis.port}"></property>  
        <property name="password" value="${spring.redis.password}"></property>  
        <property name="database" value="${spring.redis.database}"></property>  
        <property name="timeout" value="${spring.redis.timeout}"></property>  
    </bean>  
  
    <!-- 配置RedisTemplate -->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory" ref="connectionFactory"></property>  
        <property name="keySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>  
        </property>  
        <property name="valueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>  
        </property>  
  
        <property name="hashKeySerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>  
        </property>  
        <!-- 使用JacksonJsonRedisSerializer需要引入jar包：barchart-wrap-jackson-1.8.6-build001.jar -->  
        <!-- JacksonJsonRedisSerializer 需要一个有参的构造函数，因此需要配置constructor-arg -->  
        <property name="hashValueSerializer">  
            <bean  
                class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer">  
                <constructor-arg type="java.lang.Class" value="java.lang.Object"></constructor-arg>  
            </bean>  
        </property>  
    </bean>  
  
    <!-- 配置redis连接池 -->  
    <bean id="redisdao" class="com.jk1504.fuzhu.redisdao">
    	<constructor-arg index="0" ref="poolConfig" />  
        <constructor-arg index="1" value="${spring.redis.host}" />  
        <constructor-arg index="2"  value="${spring.redis.port}" />  
        <constructor-arg index="3"  value="${spring.redis.timeout}" />  
        <constructor-arg index="4" value="${spring.redis.password}" />  
        <constructor-arg index="5" value="${spring.redis.database}" />
    </bean>
</beans>  